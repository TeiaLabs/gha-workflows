name: Reusable Quality Assurance Workflow
on:
  workflow_call:
    inputs:
      deps-directory:
        description: What folder to search for requirements.
        required: false
        default: "."
        type: string
      source-directory:
        description: Directory containing the source code.
        required: true
        type: string
      module-directory:
        description: Directory containing a specific module source code.
        required: false
        default: .
        type: string

      sort:
        description: Whether to run isort.
        required: false
        default: true
        type: boolean
      format:
        description: Whether to run black.
        required: false
        default: true
        type: boolean
      mypy:
        description: Whether to run mypy.
        required: false
        default: true
        type: boolean
      flake8:
        description: Whether to run flake8.
        required: false
        default: true
        type: boolean
      pylint:
        description: Whether to run pylint.
        required: false
        default: true
        type: boolean

    outputs:
      flake8_report_path:
        description: "Flake8 Report Path"
        value: ${{ jobs.Flake8.outputs.report_path }}
      pylint_report_path:
        description: "Pylint Report Path"
        value: ${{ jobs.Pylint.outputs.report_path }}

jobs:
  Sort:
    runs-on: ubuntu-latest
    if: inputs.sort
    steps:
      - name: Load Cache & Dependencies
        uses: TeiaLabs/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          application: true
          quality: true

      - name: Sort imports using isort
        id: sort
        uses: isort/isort-action@master
        with:
          sortPaths: ${{ inputs.source-directory }}/${{ inputs.module-directory }}

  Format:
    runs-on: ubuntu-latest
    if: inputs.format
    steps:
      - name: Load Cache & Dependencies
        uses: TeiaLabs/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Format using Black
        uses: psf/black@stable
        with:
          src: ${{ inputs.source-directory }}

  TypeCheck:
    runs-on: ubuntu-latest
    if: inputs.mypy
    steps:
      - name: Load Cache & Dependencies
        uses: TeiaLabs/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Format using MyPy
        run: mypy ${{ inputs.module-directory }}
        working-directory: ${{ inputs.source-directory }}

  Pylint:
    runs-on: ubuntu-latest
    if: inputs.pylint
    outputs:
      report_path: pyliynt-results/pyliynt.xml
    steps:
      - name: Load Cache & Dependencies
        uses: TeiaLabs/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Lint with PyLint
        run: pylint --recursive=y ${{ inputs.module-directory }} --output-format=json:pylint.json,colorized
        working-directory: ${{ inputs.source-directory }}

      - name: Upload PyLint results
        uses: actions/upload-artifact@v3
        with:
          name: pylint-results
          path: ${{ inputs.source-directory }}/pylint.json

  Flake8:
    runs-on: ubuntu-latest
    if: inputs.flake8
    outputs:
      report_path: flake8-results/flake8.txt
    steps:
      - name: Load Cache & Dependencies
        uses: TeiaLabs/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Lint with Flake8
        run: flake8 ${{ inputs.module-directory }} --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics --output-file=flake8.txt
        working-directory: ${{ inputs.source-directory }}

      - name: Upload Flake8 results
        uses: actions/upload-artifact@v3
        with:
          name: flake8-results
          path: ${{ inputs.source-directory }}/flake8.txt
